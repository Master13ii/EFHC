import { z } from 'zod';

// Схема для валидации переменных окружения
const envSchema = z.object({
  NODE_ENV: z
    .enum(['development', 'production', 'test'])
    .default('development'),
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z
    .string()
    .min(1, { message: 'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is required' }),
  CLERK_SECRET_KEY: z
    .string()
    .min(1, { message: 'CLERK_SECRET_KEY is required' }),
  DATABASE_URL: z
    .string()
    .url({ message: 'DATABASE_URL must be a valid URL' })
    .min(1, { message: 'DATABASE_URL is required' }),
  NEXT_PUBLIC_POSTHOG_KEY: z
    .string()
    .min(1, { message: 'NEXT_PUBLIC_POSTHOG_KEY is required' }),
  POSTHOG_HOST: z
    .string()
    .url({ message: 'POSTHOG_HOST must be a valid URL' })
    .min(1, { message: 'POSTHOG_HOST is required' }),
  SENTRY_AUTH_TOKEN: z.string().optional(),
  NEXT_PUBLIC_SENTRY_DSN: z.string().optional(),
  ANALYZE: z.string().optional(),
  CI: z.string().optional(),
});

// Парсинг переменных окружения
const result = envSchema.safeParse({
  NODE_ENV: process.env.NODE_ENV,
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,
  CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,
  DATABASE_URL: process.env.DATABASE_URL,
  NEXT_PUBLIC_POSTHOG_KEY: process.env.NEXT_PUBLIC_POSTHOG_KEY,
  POSTHOG_HOST: process.env.POSTHOG_HOST,
  SENTRY_AUTH_TOKEN: process.env.SENTRY_AUTH_TOKEN,
  NEXT_PUBLIC_SENTRY_DSN: process.env.NEXT_PUBLIC_SENTRY_DSN,
  ANALYZE: process.env.ANALYZE,
  CI: process.env.CI,
});

// Проверка результата
if (!result.success) {
  console.error(
    'Invalid environment variables:',
    JSON.stringify(result.error.format(), null, 2)
  );
  throw new Error('Invalid environment variables. Check the console for details.');
}

export default result.data;
